<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Kogito, ergo Rules — Part 2: An All-Encompassing Execution Model for Rules</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8pakuLZdavM/kogito-ergo-rules-part-2-all.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Edoardo Vacchi</name></author><id>searchisko:content:id:jbossorg_blog-kogito_ergo_rules_part_2_an_all_encompassing_execution_model_for_rules</id><updated>2019-07-29T15:30:22Z</updated><published>2019-07-29T09:18:00Z</published><content type="html">&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="228" data-original-width="800" height="180" src="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;span style="font-family: inherit;"&gt;This is the &lt;i&gt;second post &lt;/i&gt;of a &lt;a href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-1-bringing.html"&gt;series of updates&lt;/a&gt; on the Kogito initiative and our efforts to bring Drools to the cloud. In this post we delve into the details of &lt;b&gt;rule units&lt;/b&gt; and show you why we are excited about them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 class="western"&gt;&lt;span style="font-size: 1.5em; font-weight:400"&gt;An All-Encompassing Execution Model for Rules&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;If you’ve been carefully scrutinising the Drools manual looking for new features at every recent release, you may have noticed that the term &lt;b&gt;rule unit&lt;/b&gt; has been sitting there for a while, as an &lt;i&gt;extremely experimental feature&lt;/i&gt;. In short, a rule unit is both a &lt;b&gt;module&lt;/b&gt; for rules and a &lt;b&gt;unit of execution&lt;/b&gt;—the reason why we are not calling them &lt;i&gt;modules&lt;/i&gt; is to avoid confusion with &lt;i&gt;JVM modules&lt;/i&gt;. In Kogito, we are revisiting and expanding upon our original prototype. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;A &lt;b&gt;rule unit&lt;/b&gt; collects a set of rules together with the description of the working memory such rules act upon. The description of the working memory is written as a regular Java class, with &lt;i&gt;DataSource&lt;/i&gt; fields. Each data source represents a &lt;i&gt;typed partition&lt;/i&gt; of the working memory, and different types of data sources exist, with different features. For instance, in the following example we used an append-only data source, called &lt;i&gt;data stream.&lt;/i&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Rules of a given rule unit are collected in DRL files with the &lt;span style="font-family: &amp;quot;roboto mono&amp;quot; , monospace;"&gt;&lt;b&gt;unit&lt;/b&gt;&lt;/span&gt;declaration&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Each rule in a unit has visibility over &lt;i&gt;all&lt;/i&gt; the data sources that have been declared in the corresponding class. In fact, the class and the collection of DRL files of a unit form a &lt;i&gt;whole&lt;/i&gt;: you can think of such a whole as of &lt;i&gt;one single&lt;/i&gt; &lt;i&gt;class&lt;/i&gt;where &lt;i&gt;fields&lt;/i&gt; are &lt;i&gt;globals &lt;/i&gt;that are scoped to the current unit, and &lt;i&gt;methods &lt;/i&gt;are &lt;i&gt;rules&lt;/i&gt;. In fact, the use of fields supersedes the use of DRL globals.&lt;/div&gt;&lt;div class="separator" style="clear: both; margin: 1em; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-BCwCCb_D7S4/XT66U45tcgI/AAAAAAAADME/nwjoAsBIau08mrxpNeBhoZMrwFDyF3SSQCLcBGAs/s1600/kogito-part2-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="465" data-original-width="1152" height="258" src="https://4.bp.blogspot.com/-BCwCCb_D7S4/XT66U45tcgI/AAAAAAAADME/nwjoAsBIau08mrxpNeBhoZMrwFDyF3SSQCLcBGAs/s640/kogito-part2-1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div align="left" style="margin-bottom: 0in;"&gt;A rule unit is submitted for execution to a &lt;a href="https://4.bp.blogspot.com/-M9raRmeKPNQ/XT7DDRWF-DI/AAAAAAAADMc/81Z4vgcOwms4ZFFlSTRr_mpZHEilUFfNACPcBGAYYCw/s1600/unitsm.png"&gt;&lt;b&gt;scheduler&lt;/b&gt;&lt;/a&gt;&lt;b&gt;. &lt;/b&gt;Rule units may decide to &lt;b&gt;yield&lt;/b&gt; their execution to other rule units, effectively putting them into execution. For instance:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=IncomingEvent.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div align="left" style="margin-bottom: 0in;"&gt;But rule units may be also put in a &lt;b&gt;long-running state&lt;/b&gt;. In this case, &lt;i&gt;other rule units&lt;/i&gt; may be run &lt;i&gt;concurrently at the same time&lt;/i&gt;; because DataSources can be &lt;b&gt;shared&lt;/b&gt; across units, units can be coordinated by exchanging messages.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-qJ32J_5kRgE/XT66_zufDvI/AAAAAAAADMM/XSE0ubDeGMY3TnoacHteLqlt2egj-aaXwCLcBGAs/s1600/kogito-part2-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="388" data-original-width="806" height="308" src="https://3.bp.blogspot.com/-qJ32J_5kRgE/XT66_zufDvI/AAAAAAAADMM/XSE0ubDeGMY3TnoacHteLqlt2egj-aaXwCLcBGAs/s640/kogito-part2-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Consider the following example:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;In a certain way, &lt;b&gt;rule units behave as “actors” exchanging messages&lt;/b&gt;. However, in a very distinctive way, rule units allow for much more complex chains of executions, that are proper to rule-based reasoning. For instance, &lt;a href="https://doc.akka.io/docs/akka/2.5.23/guide/tutorial_3.html"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;consider this example from Akka's manual&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=akka.scala"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;As you can see, pattern matches in Akka are strictly over &lt;b&gt;single messages&lt;/b&gt;. This is unsurprising, because actors process one message at a time. In a rule engine, we are allowed to write several rules, reacting upon the &lt;b&gt;entire state of the working memory &lt;/b&gt;at the execution time: this significantly departs from a pure actor model design, but at the same time gives a great deal of flexibility in the way you may write the business logic of your application.&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;h4&gt;Data Sources &lt;/h4&gt; It is worth to spend a few words on data sources as well. The data source construct can be seen as both a &lt;b&gt;partition&lt;/b&gt; and an&lt;b&gt; abstraction&lt;/b&gt; over the traditional working memory. Different kinds of data sources will be available: full-featured &lt;b&gt;data stores&lt;/b&gt; may support to add, remove and update values, allowing for more traditional operations over the working memory; while the more constrained append-only &lt;b&gt;data streams&lt;/b&gt; would be easier to integrate with external data sources and data sinks, such as Camel connectors; such constraints would be also valuable to enable more advanced use cases, such as&lt;b&gt; parallel, thread-safe execution&lt;/b&gt; and &lt;b&gt;persisted shared channel &lt;/b&gt;(e.g.: Kafka) across nodes of an&lt;b&gt; OpenShift cluster&lt;/b&gt;, realizing a fully &lt;b&gt;distributed rule engine.&lt;/b&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&amp;nbsp; &lt;br /&gt;&lt;h2 class="western" style="font-size:1.5em; font-weight:400"&gt;Kogito: ergo Cloud&lt;/h2&gt;&lt;div style="margin-bottom: 0in;"&gt;The parallel and distributed use cases are &lt;i&gt;intriguing&lt;/i&gt;, but we need to get there with &lt;i&gt;baby steps.&lt;/i&gt;However, this does not mean that the first steps won't be as exciting in their own way.&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;For &lt;a href="http://kogito.kie.org/"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;&lt;b&gt;Kogito&lt;/b&gt;&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;we want to stress the cloud-native, stateless use case, where &lt;b&gt;control flow&lt;/b&gt; is &lt;b&gt;externalized&lt;/b&gt; using &lt;b&gt;processes&lt;/b&gt; and, with the power of &lt;a href="https://quarkus.io/"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;Quarkus&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;we can compile this into super-fast native binaries. This is why in the next few weeks we will complete and release rule units for &lt;i&gt;automated REST service implementation&lt;/i&gt;. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;In this use case, the typed, Java-based declaration of a&lt;b&gt; rule unit&lt;/b&gt; is &lt;b&gt;automatically &lt;/b&gt;mapped to the signature of a REST endpoint. &lt;b&gt;POST&lt;/b&gt;ing to the endpoint implies instantiating the unit, inserting data into the data sources, firing rules, returning the response payload. The response is computed using a &lt;i&gt;user-provided query&lt;/i&gt;. For instance, consider this example:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=query.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Users may post events using the auto-generated &lt;span style="font-family: &amp;quot;roboto mono&amp;quot; , monospace;"&gt;/monitoring-service&lt;/span&gt;endpoint.&lt;/div&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=req.json"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;the reply will be the result of the query. In our case:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=resp.json"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h2 style="font-size:1.5em; font-weight:400"&gt;Cloudy with a Chance of Rules&lt;/h2&gt;&lt;div style="margin-bottom: 0in;"&gt; We have presented our vision for the next generation of our rule engine in Kogito and beyond. The stateless use case is only the first step towards what we think will be a truly innovative take on rule engines. In the following months we will work on delivering better support for scheduling and deploying units in parallel (local) and distributed (on Openshift), so stay tuned for more. In the meantime, we do want to hear from you about the direction we are taking. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;The future of Drools is cloudy… and bright!&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;/div&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/9agcEEYLpcE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8pakuLZdavM" height="1" width="1" alt=""/&gt;</content><summary>This is the second post of a series of updates on the Kogito initiative and our efforts to bring Drools to the cloud. In this post we delve into the details of rule units and show you why we are excited about them. An All-Encompassing Execution Model for Rules If you’ve been carefully scrutinising the Drools manual looking for new features at every recent release, you may have noticed that the ter...</summary><dc:creator>Edoardo Vacchi</dc:creator><dc:date>2019-07-29T09:18:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/9agcEEYLpcE/kogito-ergo-rules-part-2-all.html</feedburner:origLink></entry><entry><title>Red Hat Universal Base Image: How it works in 3 minutes or less</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HksMkzvKlXY/" /><category term="Universal Base Images (UBI)" /><category term="containers" /><category term="UBI" /><author><name>Mike Guerette</name></author><id>https://developers.redhat.com/blog/?p=615977</id><updated>2019-07-29T07:00:36Z</updated><published>2019-07-29T07:00:36Z</published><content type="html">&lt;p&gt;When we announced &lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-now-generally-available/"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; in May, we also &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;announced&lt;/a&gt; that all RHEL 8 base operating systems images, and many new RHEL 7 ones, would be available under the new &lt;a href="https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf"&gt;Universal Base Image End User License Agreement (EULA)&lt;/a&gt;. If UBI is new for you, this article summarizes UBI, explains why you’d want to use it, and supplies a set of resources to get you started with UBI.  And, if you have questions, we just published a brand new &lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;UBI FAQ&lt;/a&gt;.&lt;span id="more-615977"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is UBI?&lt;/h2&gt; &lt;p&gt;Red Hat Universal Base Images (UBI) are OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous RHEL base images, they are built from portions of Red Hat Enterprise Linux. UBI images can be obtained from the &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt; and be built and deployed anywhere.&lt;/p&gt; &lt;p&gt;And, you don’t need to be a Red Hat customer to use or redistribute them. Really.&lt;/p&gt; &lt;h2&gt;What’s included?&lt;/h2&gt; &lt;p&gt;The Red Hat Universal Base Image includes three things:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A set of three base images (Minimal, Standard, and Multi-service) are provided to provide optimum starting points for a variety of use cases. &lt;a href="https://developers.redhat.com/products/rhel/ubi/#assembly-field-sections-18555"&gt;Learn more.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;A set of language runtime images (PHP, Perl, Python, Ruby, Node.js) enable you to start coding right away with the confidence that a Red Hat built container image provides.&lt;/li&gt; &lt;li&gt;A set of associated YUM repositories/channels include RPM packages and updates that allow you to add application dependencies and rebuild UBI container images anytime you want.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;UBI in action: How it works in just 3 minutes&lt;/h2&gt; &lt;p&gt;With UBI, you can containerize an app on one platform and share for deploying on another platform. In this video, Scott McCarty does a great job explaining how it works in just three minutes.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/VG7Y1mjVIE0?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Why should you use UBI?&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; — Saves development time by building a portable app.&lt;/p&gt; &lt;p&gt;Before UBI, you had to package your containerized app for each target that it needed to deploy on. Given this, containers were not really portable like zip or gif files are today. UBI lets you create the image once and deploy anywhere using enterprise-grade packages. The alternative is to use untrusted, unreliable, and/or inferior packages that won’t stand up to enterprise-grade demands. That approach is broken from the start.&lt;/p&gt; &lt;h3&gt;Special heads-up for ISVs—Red Hat Container Certification&lt;/h3&gt; &lt;p&gt;Customers have gotten nervous about how secure applications are. Red Hat has addressed this by offering container certification which gives confidence to anyone wanting to try and/or use your software. It’s a free service—just join the &lt;a href="https://developers.redhat.com/products/rhel/ubi/#assembly-field-sections-18515"&gt;Red Hat Technology partner program&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Get started&lt;/h2&gt; &lt;p&gt;Here are three steps to get started:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download from UBI7 or UBI8 from the &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat container catalog&lt;/a&gt;, and do what Scott has shown in the video above.&lt;/li&gt; &lt;li&gt;Next, do something with one of the runtime languages: PHP, Perl, Python, Ruby, or Node.js. You&amp;#8217;ll find these in the catalog, too (separate ones for RHEL 7 or 8).&lt;/li&gt; &lt;li&gt;Give us feedback; see below for ways to contact us.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;UBI information page.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;UBI FAQ&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Email UBI questions and/or feedback to ubi AT redhat DOT com.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/mailman/listinfo/ubi"&gt;Join&lt;/a&gt; the UBI community mailing list and follow UBI discussions.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#038;title=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/" data-a2a-title="Red Hat Universal Base Image: How it works in 3 minutes or less"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HksMkzvKlXY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When we announced Red Hat Enterprise Linux 8 in May, we also announced that all RHEL 8 base operating systems images, and many new RHEL 7 ones, would be available under the new Universal Base Image End User License Agreement (EULA). If UBI is new for you, this article summarizes UBI, explains why you’d want [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">615977</post-id><dc:creator>Mike Guerette</dc:creator><dc:date>2019-07-29T07:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/</feedburner:origLink></entry><entry><title>3scale toolbox: Deploy an API from the CLI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WnKCPsQLzpc/" /><category term="Developer Tools" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="API" /><category term="API lifecycle" /><category term="ci/cd" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=611307</id><updated>2019-07-29T07:00:32Z</updated><published>2019-07-29T07:00:32Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;Deploying your API from a CI/CD pipeline&lt;/a&gt; can be a tremendous amount of work. The latest release of Red Hat Integration greatly improved this situation by adding new capabilities to the &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;3scale&lt;/a&gt; CLI. The 3scale CLI is named &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.4/html/api_devops/cli-toolbox"&gt;3scale toolbox&lt;/a&gt; and strives to help API administrators to operate their services as well as automate the delivery of their API through Continuous Delivery pipelines.&lt;/p&gt; &lt;p&gt;Having a standard CLI is a great advantage for our customers since they can use it in the CI/CD solution of their choice (Jenkins, GitLab CI, Ansible, Tekton, etc.). It is also a means for Red Hat to capture customer needs as much as possible and offer the same feature set to all our customers.&lt;span id="more-611307"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;3scale toolbox at a glance&lt;/h2&gt; &lt;p&gt;The 3scale toolbox can manage a wide variety of objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Services&lt;/strong&gt;: Import from a CSV or OpenAPI specification file.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Proxies:&lt;/strong&gt; Promote a proxy configuration to production, show the current configuration.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;ActiveDocs&lt;/strong&gt;: Manage the OpenAPI specification repository.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt;: Copy policies from a registry to another.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt; and &lt;strong&gt;metrics.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Application plans&lt;/strong&gt;: Import application plans from an artefact file.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt;: Manage client applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Accounts&lt;/strong&gt;: Manage client accounts.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The 3scale toolbox follows the usual conventions from CLIs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Output a non-zero status code on error.&lt;/li&gt; &lt;li&gt;stderr contains error messages; stdout contains useful output.&lt;/li&gt; &lt;li&gt;For data that needs to be parsed by a script or pipeline, the 3scale toolbox can output JSON or YAML.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To those conventions, we added a key principle: most operations should be &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;. This means you can simply state how you want the system to be and the 3scale toolbox will act accordingly: update the existing configuration if it exists, create when missing. Idempotence will help you build more reliable pipeline in case of an outage or transient perturbation.&lt;/p&gt; &lt;h2&gt;Support status&lt;/h2&gt; &lt;p&gt;The 3scale toolbox is a supported component of the Red Hat Integration solution. It is supported natively on Red Hat Enterprise Linux (RHEL) and on OpenShift. On RHEL, the toolbox is provided by the RPM &amp;#8220;3scale-toolbox&amp;#8221; that comes with the channel &amp;#8220;rhel-7-server-3scale-amp-2.6-rpms.&amp;#8221; On OpenShift, the container image &amp;#8220;3scale-amp26/toolbox&amp;#8221; can be used.&lt;/p&gt; &lt;p&gt;In this release, we targeted Jenkins as the main use case for the 3scale toolbox, but you can use it with any other CI/CD solution as long as the toolbox &lt;a href="https://access.redhat.com/articles/2798521"&gt;runs on a supported configuration&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Target use cases&lt;/h2&gt; &lt;p&gt;The 3scale toolbox can be used to achieve a wide variety of use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;CI/CD pipelines: Deploy your APIs continuously from your preferred CI/CD solution.&lt;/li&gt; &lt;li&gt;Disaster recovery plans: The 3scale toolbox can copy existing services and policies from one instance to another.&lt;/li&gt; &lt;li&gt;One-off scripts: Automate the deletion of unused services before a migration for instance.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Installation of the 3scale toolbox&lt;/h2&gt; &lt;p&gt;Install the toolbox on your Red Hat Enterprise Linux server by running:&lt;/p&gt; &lt;pre&gt;$ sudo yum install --enablerepo=rhel-7-server-3scale-amp-2.6-rpms 3scale-toolbox&lt;/pre&gt; &lt;p&gt;You can confirm the toolbox is installed by executing:&lt;/p&gt; &lt;pre&gt;$ 3scale --version 0.12.3&lt;/pre&gt; &lt;h2&gt;Configuration of the 3scale toolbox&lt;/h2&gt; &lt;p&gt;To use the toolbox, you will have to generate &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale/2-saas/html-single/accounts/index#access_tokens"&gt;an access token that has write permission on the Account Management API.&lt;/a&gt; Then, you can add a &amp;#8220;remote&amp;#8221;:&lt;/p&gt; &lt;pre&gt;$ 3scale remote add 3scale-saas "https://123...456@MY-TENANT-admin.3scale.net/"&lt;/pre&gt; &lt;p&gt;You will have to replace &amp;#8220;123&amp;#8230;456&amp;#8221; with the access token generated previously and &amp;#8220;MY-TENANT&amp;#8221; with the name of your 3scale Admin Portal.&lt;/p&gt; &lt;p&gt;You can confirm the configuration is working by listing existing services (there must be at least one):&lt;/p&gt; &lt;pre&gt;$ 3scale service list 3scale-saas ID NAME SYSTEM_NAME 2555417757658 Echo API api&lt;/pre&gt; &lt;h2&gt;Simple use case: deploy an API from the CLI&lt;/h2&gt; &lt;p&gt;For the first contact, let&amp;#8217;s choose a very simple use case: we would like to deploy an API from the CLI and make sure it is working end-to-end.&lt;/p&gt; &lt;p&gt;First, fetch the OpenAPI Specification file of the Beer Catalog service:&lt;/p&gt; &lt;pre&gt;$ curl -sfk -o swagger.json https://raw.githubusercontent.com/microcks/api-lifecycle/master/beer-catalog-demo/api-contracts/beer-catalog-api-swagger.json&lt;/pre&gt; &lt;p&gt;Deploy the new service:&lt;/p&gt; &lt;pre&gt;$ 3scale import openapi -d 3scale-saas swagger.json --override-private-base-url=https://echo-api.3scale.net -t beer-catalog &lt;span class="s1"&gt;Created service id: 2555417822198, name: Beer Catalog API&lt;/span&gt; &lt;span class="s1"&gt;Service proxy updated&lt;/span&gt; &lt;span class="s1"&gt;destroying all mapping rules&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer/{name}$ endpoint&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer/findByStatus/{status}$ endpoint&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer$ endpoint&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Create an application plan:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="pl-s"&gt;3scale &lt;/span&gt;&lt;span class="pl-s"&gt;application-plan &lt;/span&gt;&lt;span class="pl-s"&gt;apply 3scale-saas&lt;/span&gt; beer-catalog &lt;span class="pl-s"&gt;test &lt;/span&gt;&lt;span class="pl-s"&gt;-n &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Test Plan&lt;span class="pl-pds"&gt;" &lt;/span&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;--default &lt;/span&gt;&lt;span class="s1"&gt;Applied application plan id: 2357356113164; Default: true&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Create an application:&lt;/p&gt; &lt;pre&gt;$ 3scale application apply 3scale-saas 1234567890abcdef --account=john --name="Test Application" --description="Created from the CLI" --plan=test --service=beer-catalog &lt;span class="s1"&gt;Applied application id: 1409618501689&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Get the URL of the staging gateway:&lt;/p&gt; &lt;pre&gt;$ STAGING_URL=$(&lt;span class="s1"&gt;3scale proxy-config show 3scale-saas beer-catalog sandbox |jq -r .content.proxy.sandbox_endpoint) $ echo $STAGING_URL https://beer-catalog-2445582535750.staging.gw.apicast.io:443 &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for this command to succeed, you will need to have &lt;a href="https://stedolan.github.io/jq/download/"&gt;jq installed&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Make sure the newly deployed API is working:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="s1"&gt;curl -D - -H "api-key: 1234567890abcdef" "$STAGING_URL/beer"&lt;/span&gt; HTTP/1.1 200 OK Content-Type: application/json Content-Length: 730 Connection: keep-alive { "method": "GET", "path": "/beer", ... }&lt;/pre&gt; &lt;p&gt;Since the staging gateway is working perfectly, you can now promote the configuration to the production gateway:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="s1"&gt;3scale proxy-config promote 3scale-saas beer-catalog&lt;/span&gt; &lt;span class="s1"&gt;Proxy Configuration version 2 promoted to 'production'&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Congratulations, your API is now up and running!&lt;/p&gt; &lt;h2&gt;Run the toolbox in a container&lt;/h2&gt; &lt;p&gt;In the previous examples, we ran the toolbox on a Red Hat Enterprise Linux server, but you can also run it in a container!&lt;/p&gt; &lt;p&gt;The first step would be to create a Kubernetes secret holding the toolbox configuration:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic 3scale-toolbox --from-file="$HOME/.3scalerc.yaml" secret/3scale-toolbox created&lt;/pre&gt; &lt;p&gt;Create a ConfigMap holding the OpenAPI specification file you want to deploy:&lt;/p&gt; &lt;pre&gt;$ oc create configmap openapi --from-file=swagger.json configmap/openapi created&lt;/pre&gt; &lt;p&gt;Run the toolbox by creating a Kubernetes job:&lt;/p&gt; &lt;pre&gt;$ oc create -f - &amp;#60;&amp;#60;EOF apiVersion: batch/v1 kind: Job metadata: name: toolbox spec: backoffLimit: 0 activeDeadlineSeconds: 300 template: spec: restartPolicy: Never containers: - name: toolbox image: quay.io/redhat/3scale-toolbox:master imagePullPolicy: Always args: [ "3scale", "import", "openapi", "-d", "3scale-saas", "/artifacts/swagger.json", "--override-private-base-url=https://echo-api.3scale.net", "-t", "beer-catalog" ] env: - name: HOME value: /config volumeMounts: - name: toolbox-config mountPath: /config - name: artifacts mountPath: /artifacts volumes: - name: toolbox-config secret: secretName: 3scale-toolbox - name: artifacts configMap: name: openapi EOF&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The job definition above uses the community image. Red Hat customers can use this image instead: 3scale-amp26/toolbox.&lt;/p&gt; &lt;p&gt;Confirm the beer-catalog service has been updated:&lt;/p&gt; &lt;pre&gt;$ oc logs -f job/toolbox Updated service id: 2555417822198, name: Beer Catalog API Service proxy updated destroying all mapping rules Created GET /beer/{name}$ endpoint Created GET /beer/findByStatus/{status}$ endpoint Created GET /beer$ endpoint Activedocs exists, update!&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The 3scale toolbox is the basis for many automation involving APIs and the Red Hat Integration solution. It is a supported component that covers a wide range of use cases.&lt;/p&gt; &lt;p&gt;Discover how the API management capability of Red Hat Integration can help you deploy your API from a CI/CD pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#038;title=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/" data-a2a-title="3scale toolbox: Deploy an API from the CLI"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WnKCPsQLzpc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Deploying your API from a CI/CD pipeline can be a tremendous amount of work. The latest release of Red Hat Integration greatly improved this situation by adding new capabilities to the 3scale CLI. The 3scale CLI is named 3scale toolbox and strives to help API administrators to operate their services as well as automate the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">611307</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-29T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/</feedburner:origLink></entry><entry><title>Guidelines for instruction encoding in the NOP space</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1djWRPFjiQw/" /><category term="Containers" /><category term="Developer Tools" /><category term="Security" /><category term="ABI" /><author><name>Florian Weimer</name></author><id>https://developers.redhat.com/blog/?p=614477</id><updated>2019-07-29T07:00:23Z</updated><published>2019-07-29T07:00:23Z</published><content type="html">&lt;p&gt;More and more CPUs implement new features with instructions that are executed as NOPs (no-operation instructions) on previous CPU generations. This results in some challenges for operating system builders, particularly in the area of legacy software support.&lt;/p&gt; &lt;p&gt;&lt;span id="more-614477"&gt;&lt;/span&gt;An instruction that can be ignored completely by some CPUs does not seem useful, but it turns out that there are quite a few applications for it, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Performance hints, such as marking atomic loads and stores which are part of mutex lock and unlock operations.&lt;/li&gt; &lt;li&gt;Optional array bounds checking, as once implemented by Intel MPX.&lt;/li&gt; &lt;li&gt;Security hardening, such as verifying at load time that memory is read-only (and not writable), for making it harder to inject C++ vtables or bytecode.&lt;/li&gt; &lt;li&gt;Markers in the instruction stream, for control-flow integrity validation (e.g., Intel CET), or as hints to dynamic instrumentation tools, such as Valgrind.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using an instruction encoding in the NOP space means that operating system and application developers can deliver a single set of binaries. These binaries work both on old CPUs and new CPUs. On old CPUs, due to their no-operation nature, the instructions and the information they provide is completely ignored. New CPUs that recognize the instructions can run the same binaries, which then benefit from the additional CPU features. There are a few caveats related so that this works smoothly in practice.&lt;/p&gt; &lt;h2&gt;NOP support between implementations can vary&lt;/h2&gt; &lt;p&gt;Most instruction sets have multiple independent implementations. Even if there is just a single CPU vendor for real silicon, distributions like Fedora and Red Hat Enterprise Linux deal with at least three implementation: the actual hardware, emulation support in QEMU, and the &lt;a href="http://valgrind.org/"&gt;Valgrind&lt;/a&gt; instruction decoder and compiler. If a new instruction should be in the NOP space but is not, according to one of the existing implementations, the results can be unpredictable. Often, these not-yet-implemented NOPs result in illegal instruction traps, which completely invalidates the reason for using instructions in the NOP space in the first place.&lt;/p&gt; &lt;p&gt;For example, the Intel x86 architecture initially supported only a limited length for NOP instructions. Support for longer NOPs first appeared in the Intel Pentium Pro CPU, but &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=6957"&gt;long NOP support was not present in all CPUs with an otherwise comparable feature set&lt;/a&gt;, resulting in interoperability issues. Binaries using long NOPs crashed with an illegal instruction trap on CPUs which did not support them.&lt;/p&gt; &lt;h2&gt;Changed NOP behavior needs to be optional&lt;/h2&gt; &lt;p&gt;As an additional safety measure, instructions in the NOP space should not become active immediately after merely upgrading the CPU. There are two reasons for this: a toolchain (compiler/assembler/linker combination) may have produced these NOPs by accident (e.g., a non-mainstream toolchain the CPU vendor is not tracking effectively). Or, there could be existing binaries with deliberate use of the NOP instructions. And because the NOPs have been ignored so far, not ignoring them could expose new bugs (incorrect results or crashes). These bugs could either be genuine toolchain bugs or simple misuse of the new feature by application developers who did not have an opportunity to test their code.&lt;/p&gt; &lt;p&gt;Both cases can be very challenging for users who want to upgrade their hardware. Software usually outlives hardware. It is not always possible to rebuild affected binaries from source code (or re-link them against updated libraries). Under such circumstances, new instructions in the NOP space can delay hardware updates indefinitely.&lt;/p&gt; &lt;p&gt;In the past, virtualization was a sufficient solution to this dilemma: The hypervisor could provide a CPU model that disables these NOP-space instructions, even though the physical CPU would support them. Of course, this still needs some level of support in the CPU for a split configuration: new instruction support for the hypervisor itself and some guests, but no support (true NOP operation) for other guests.  (Typically, system administrators do not want to disable security hardening features on the hypervisor for the sake of a single guest.)&lt;/p&gt; &lt;p&gt;In a container-based world, such coarse control does not appear to be sufficient. In environments with high security requirements (or multiple tenants), the container host and certain privileged containers will be expected to run with full hardening enhancements provided by NOP-space instructions. However, it is still desirable to provide full compatibility with container images that end users supply and that are affected by either or both bug categories described above. A boot-time configuration setting will often be too coarse-grained to be useful. (We recently encountered a similar trade-off between security hardening and compatibility with old container images in the context of &lt;code&gt;vsyscall&lt;/code&gt; page support on Linux.)&lt;/p&gt; &lt;h3&gt;How to make new behavior optional&lt;/h3&gt; &lt;p&gt;The low-level software interfaces to enable such selective support can take various forms.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Use ELF markup to enable the new CPU feature. The ELF loader in the kernel (or in the glibc dynamic loader) can inspect existing binaries and verify that everything has the required support level. If the dynamic loader in userspace is responsible for turning on support, there is an overlap with the next option.&lt;/li&gt; &lt;li&gt;Compatible binaries could explicitly opt in to the new behavior, using a system call (or a new sub-command for the &lt;code&gt;prctl&lt;/code&gt; or &lt;code&gt;arch_prctl&lt;/code&gt; system calls), or by setting a special CPU register (this is how &lt;code&gt;libmpx&lt;/code&gt; switched on Intel MPX). This setting would only apply to the current process or thread. (What makes sense here depends on the feature in question.) When the process image is replaced by a new one using &lt;code&gt;execve&lt;/code&gt;, support for the new instructions would revert to the default (disabled).&lt;/li&gt; &lt;li&gt;For the container use case, it could be interesting to have a system call and make the support state inheritable across &lt;code&gt;execve&lt;/code&gt;. This means that the entire process tree in a container would use the new CPU feature. It would be up to the container engine to make sure that the image is compatible with that, probably by inspecting metadata associated with the container image and conveying that information to the kernel via a system call.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A concrete implementation involving kernel, hypervisor, CPU and perhaps firmware could take many forms.  The key point is that a single running operating system kernel must be able to support different feature activation states across its separate processes. Once the CPU and firmware support this capability, the kernel and hypervisor can collaborate to implement the per-process model. If it is just a boot-time option, either per guest or (worse) per physical host, enabling the feature in a container-based world is much more difficult.&lt;/p&gt; &lt;h2&gt;Coordination with dynamic instrumentation tools, such as Valgrind&lt;/h2&gt; &lt;p style="text-align: left;"&gt;Valgrind does not only emulate NOPs, it is also possible to embed special NOP-like instruction sequences using the &lt;a href="https://sourceware.org/git/gitweb.cgi?p=valgrind.git;a=blob;f=include/valgrind.h;h=HEAD"&gt;&lt;code&gt;valgrind.h&lt;/code&gt;&lt;/a&gt; header file. These instructions are (mostly) ignored when running on a real CPU, but they provide useful information to Valgrind when running under emulation. For example, they can explicitly mark memory as undefined when Valgrind assumes it is defined (based on previous program actions).&lt;/p&gt; &lt;p&gt;New NOP space instructions should not conflict with the marker instructions Valgrind uses.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Instructions in the NOP space are an attractive way to provide new performance and security features. However, some care is necessary to avoid conflicts with existing uses of NOP instructions. And, if such conflicts arise, end users will need a way to work around them, which means that the operating system they use will need to be able to enable and disable support for the new NOP-space instructions at the individual process level.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#038;title=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/" data-a2a-title="Guidelines for instruction encoding in the NOP space"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/"&gt;Guidelines for instruction encoding in the NOP space&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1djWRPFjiQw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;More and more CPUs implement new features with instructions that are executed as NOPs (no-operation instructions) on previous CPU generations. This results in some challenges for operating system builders, particularly in the area of legacy software support. An instruction that can be ignored completely by some CPUs does not seem useful, but it turns out [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/"&gt;Guidelines for instruction encoding in the NOP space&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">614477</post-id><dc:creator>Florian Weimer</dc:creator><dc:date>2019-07-29T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/</feedburner:origLink></entry><entry><title>5 principles for deploying your API from a CI/CD pipeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2V0lms0OTHE/" /><category term="CI/CD" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="ci/cd" /><category term="Continuous Deployment" /><category term="Continuous Integration" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=608917</id><updated>2019-07-26T07:00:47Z</updated><published>2019-07-26T07:00:47Z</published><content type="html">&lt;p&gt;With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: &lt;a href="https://techbeacon.com/devops/10-companies-killing-it-devops"&gt;Amazon is deploying code to production every 11.7 seconds, Netflix deploys thousands of time per day, and Fidelity saved $2.3 million per year with their new release framework&lt;/a&gt;. So, if you have APIs, you might want to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;p&gt;Deploying your API from a CI/CD pipeline is a &lt;a href="https://developers.redhat.com/blog/2019/02/25/full-api-lifecycle-management-a-primer/"&gt;key activity of the &amp;#8220;Full API Lifecycle Management&lt;/a&gt;.&amp;#8221; Sitting between the &amp;#8220;Implement&amp;#8221; and &amp;#8220;Secure&amp;#8221; phases, the &amp;#8220;Deploy&amp;#8221; activity encompasses every process needed to bring the API from source code to the production environment. To be more specific, it covers Continuous Integration and Continuous Delivery.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png" alt="Deploy your API from a CI/CD pipeline - High Level view" width="300" height="76" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-768x194.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;br /&gt; &lt;span id="more-608917"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;An API is not &amp;#8220;just another piece of software&amp;#8221;&lt;/h2&gt; &lt;p&gt;At Red Hat, we strongly believe an API is not “just another piece of software.&amp;#8221; Instead, we think an API is a software component in conjunction with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An interface to communicate with it.&lt;/li&gt; &lt;li&gt;An ecosystem of consumers that communicate with this software.&lt;/li&gt; &lt;li&gt;A relationship with developers consuming this API.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An API is built, deployed, and managed not just with the usual methods; as a result, deploying your API from a CI/CD pipeline requires additional processes, tools, and skills.&lt;/p&gt; &lt;p&gt;In this article, we will focus on the overarching principles and key steps to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;h2&gt;Overarching principles to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Use a contract-first approach&lt;/h3&gt; &lt;p&gt;Although a code-first approach does not prevent you from deploying your API from a CI/CD pipeline, using a contract-first approach makes your processes much more reliable and streamlined.&lt;/p&gt; &lt;p&gt;In a contract-first approach, the API contract (for REST APIs the contract is named &amp;#8220;OpenAPI Specification&amp;#8221;) is crafted well ahead of the implementation phase. It is a collaboration between the product owner, the architects, the developers, and the early customers. &lt;a href="https://www.apicur.io/"&gt;The Apicurio Studio can help you easily craft OpenAPI Specifications, collaboratively.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;2. Ensure the testability of your API&lt;/h3&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline in an automated manner, tests are needed. There are different kinds of tests and a full book would be required to cover them all. To deploy your API from a CI/CD pipeline you would need to have at least:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Unit tests: to test individually each smallest software component.&lt;/li&gt; &lt;li&gt;Integration tests: to test a bigger chunk of software components together.&lt;/li&gt; &lt;li&gt;Acceptance tests: to ensure business expectations are met (as part of the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;End-to-end tests: to ensure every software component in the chain is working as expected, in a production-like environment.&lt;/li&gt; &lt;li&gt;Performance tests: to ensure the performance is not degraded by a fix or a new feature.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Unit and integration tests are well known from developers. Let&amp;#8217;s focus on the usage of the later ones.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Acceptance tests can be managed from a dedicated tool, such as &lt;a href="https://microcks.github.io/"&gt;Microcks,&lt;/a&gt; and triggered by your CI/CD pipeline.&lt;/li&gt; &lt;li&gt;Performance tests can also be automated as explained in this blog post series: &lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging Kubernetes and OpenShift for automated performance tests&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;3. Adhere to the semantic versioning&lt;/h3&gt; &lt;p&gt;When releasing new versions of your API, it is critical to adhere to the &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. It helps your CI/CD pipeline know how to deal with new releases: new minor versions are backward compatible, they can be deployed &amp;#8220;in place&amp;#8221;. Major versions will need to be deployed &amp;#8220;side-by-side&amp;#8221; to keep existing customers happy.&lt;/p&gt; &lt;h3&gt;4. Be idempotent&lt;/h3&gt; &lt;p&gt;When managing software at scale, all tech giants will tell you: stuff happens. Servers fail, routers drop packets, hard disks loose data, etc. One way to be resilient to such kind of events is to be &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;. Instead of creating a new service in your API Management solution, state that this service has to be present. Instead of deleting it, state it has to be absent. This way, your pipelines will be reliable in case of outages or transient perturbations.&lt;/p&gt; &lt;p&gt;Most operations of the &lt;a href="https://github.com/3scale/3scale_toolbox"&gt;new 3scale CLI have been designed to be idempotent&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;5. Apply the API-Management-as-Code principles&lt;/h3&gt; &lt;p&gt;Akin to the &amp;#8220;Infrastructure-as-Code&amp;#8221; principle, the &amp;#8220;API-Management-as-Code&amp;#8221; principle says that the state of your API management solution is fully determined by the content of your Git repositories. Services are defined by their OpenAPI apecification file, committed in your Git repository; Application plans are defined in an artefact file, also in your Git repository; and so on with the environment settings, API documentation, etc.&lt;/p&gt; &lt;h2&gt;Steps to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Prepare the release&lt;/h3&gt; &lt;p&gt;Since you applied API-Management-as-Code principles, all your artefacts are versioned and stored in a Git repository. To deploy your API from a CI/CD pipeline, start by &lt;strong&gt;checking out the repository.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Inside your Git repository is the API contract. &lt;strong&gt;Read the OpenAPI specification file&lt;/strong&gt; and extract the relevant information for your pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The field &amp;#8220;info.version&amp;#8221; is useful to apply semantic versioning.&lt;/li&gt; &lt;li&gt;The vendor extension fields (&amp;#8220;x-*&amp;#8221; fields) in the &amp;#8220;info&amp;#8221; object can be used to hold metadata (Business Unit in charge, target channel, state, etc.).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;From the OpenAPI specification, &lt;strong&gt;generate a Mock&lt;/strong&gt; that will be exposed to your early adopters. Later, it will be used by all your API consumers to develop their client implementation. Tools such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can generate a mock from your OpenAPI specification file.&lt;/p&gt; &lt;p&gt;From those data, you can &lt;strong&gt;compute the API versioning and status&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The API is &lt;/span&gt;&lt;b&gt;versioned&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; according to semantic versioning: minor and patch versions are released continuously in place of the previous version. Existing consumers are always using the latest version. Major versions are released side-by-side and the previous API starts its deprecation countdown.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The API &lt;strong&gt;status&lt;/strong&gt; can be computed from vendor extension fields or free-form metadata. It goes through those successive states :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt;: The API is in working state, present on the developer portal but only accessible to early adopters.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Published&lt;/strong&gt;: The API is GA, anyone can subscribe. The subscription goes through the chosen workflow (with or without approval).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;: The API is marked as deprecated. This reflects in the Developer Portal. No new third parties can subscribe to this API. API Gateway policies are enabled to communicate the retirement date (through headers or delays for instance).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Retired&lt;/strong&gt;: The API is removed from the Admin Portal and from the Developer Portal.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;2. Deploy the API&lt;/h3&gt; &lt;p&gt;Based on all this information, you can now &lt;strong&gt;publish the API in your API management solution&lt;/strong&gt;. This will declare a new service or update the existing one and apply the correct configuration.&lt;/p&gt; &lt;p&gt;If your API requires custom API gateway policies, you will have to &lt;strong&gt;build a container image of your API gateway, containing the custom policy&lt;/strong&gt;. The policy code is also stored in your Git repository. Once built, you can &lt;strong&gt;trigger a new deployment &lt;/strong&gt;of the API gateway container.&lt;/p&gt; &lt;h3&gt;3. Test your API&lt;/h3&gt; &lt;p&gt;You can now ensure business expectations are met by &lt;strong&gt;running acceptance tests&lt;/strong&gt; (from the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;). A tool such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can help you store, manage and run tests for your APIs. Having all your API test suites stored in one place is convenient: for each minor release, you can run the test suites of all previous releases. Thus ensuring the new release is actually backward compatible with the previous ones.&lt;/p&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline, you will also have to &lt;strong&gt;publish application plans &lt;/strong&gt;from the artefact files stored in your Git repository. Those staged plans are your service offering for API consumers. They hold quotas for each method, pricing rules for monetization, as well as the features list. The application plans are described as YAML files. They can be crafted by hand or from a GUI by the product owner and committed in your Git repository.&lt;/p&gt; &lt;p&gt;Once the application plans are published, you will have to &lt;strong&gt;create a new client application&lt;/strong&gt; that will be used for end-to-end tests. This client application will hold some credentials that you can use to query the deployed API. Those end-to-end tests make sure the whole chain (firewall, reverse proxies, API gateway, admin portal, API back end, load balancers, etc.) are working. To be meaningful, end-to-end tests have to test the newly added API methods.&lt;/p&gt; &lt;h3&gt;4. Release your API&lt;/h3&gt; &lt;p&gt;Your new API release has been deployed! You can now &lt;strong&gt;publish the API documentation&lt;/strong&gt; on your developer portal. You will have to take care of updating the OpenAPI Specification file to match the target environment. For OpenAPI Specification 2.0, this means updating the &lt;em&gt;host&lt;/em&gt;, &lt;em&gt;basePath&lt;/em&gt;, &lt;em&gt;schemes&lt;/em&gt;, but also the &lt;em&gt;securityDefinitions&lt;/em&gt; objects to replace the &lt;em&gt;authorizationUrl&lt;/em&gt; and &lt;em&gt;tokenUrl&lt;/em&gt; with their valid counterparts in the target environment.&lt;/p&gt; &lt;p&gt;The final touch to deploy your API from a CI/CD pipeline would be to &lt;strong&gt;notify your existing API consumers&lt;/strong&gt; that a new minor release has been deployed. You can also send them a public release note if this is part of your processes.&lt;/p&gt; &lt;h2&gt;Rollback&lt;/h2&gt; &lt;p&gt;If something goes wrong during the CI/CD pipeline, you might be interested in rolling back any modification done so far. If you followed our idempotence and API-Management-as-Code principles, this has never been so easy: you can &lt;strong&gt;just trigger a new pipeline run &lt;/strong&gt;of the previous minor release, and the previous state of the system will be restored.&lt;/p&gt; &lt;h2&gt;Environments&lt;/h2&gt; &lt;p&gt;If you have multiple environments in your company (as most, if not all our customers, have), those steps will have to be repeated in each environment.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png" alt="Deploy your API from a CI/CD pipeline - with environments" width="300" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-768x379.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;There are some subtleties though:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first step (release preparation) is done once for all.&lt;/li&gt; &lt;li&gt;The API gateway container image is also built only once and then deployed identically in each environment.&lt;/li&gt; &lt;li&gt;Acceptance tests are run in functional environments whereas end-to-end tests are run in production-like environments (as well as performance tests).&lt;/li&gt; &lt;li&gt;API consumers are notified only in production and production-like environments.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;How many environments you need is entirely up to your internal processes. Some companies are fine with three environments, others need nine environments.&lt;/p&gt; &lt;p&gt;You can leverage the multi-tenant capabilities of the API management solution to handle multiple environments on one installation. However, a separated sandbox (usually in the development environment) is needed to test the N+1 version of the API management solution before applying the update.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you can see, a lot of work is needed to deploy your API from a CI/CD pipeline! It is a good idea to choose a solution that comes with a helper CLI handling most of those operations. This way, you can focus on what matters the most: your code implementing business features.&lt;/p&gt; &lt;p&gt;Discover how the API management capability of Red Hat Integration can help you deploy your API from a CI/CD pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#038;title=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/" data-a2a-title="5 principles for deploying your API from a CI/CD pipeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2V0lms0OTHE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: Amazon is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">608917</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-26T07:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/</feedburner:origLink></entry><entry><title>DevNation Live: Subatomic reactive systems with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ripgBkVrW58/" /><category term="DevNation" /><category term="Feature" /><category term="Quarkus" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=612637</id><updated>2019-07-26T06:59:16Z</updated><published>2019-07-26T06:59:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, &lt;a href="https://developers.redhat.com/videos/youtube/-Cj5EhDZ0fg/"&gt;Clement Escoffier&lt;/a&gt;, Principal Software Engineer at Red Hat, will dive into the reactive side of &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt;.&lt;span id="more-612637"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Quarkus provides a supersonic development experience and a subatomic execution environment thanks to its integration with GraalVM. But, that&amp;#8217;s not all. Quarkus also unifies the imperative and reactive paradigm.&lt;/p&gt; &lt;p&gt;This discussion is about the reactive side of Quarkus and how you can use it to implement reactive and data streaming applications. From WebSockets to Kafka integration and reactive streams, you will learn how to build a reactive system with Quarkus.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/fQMg3Ve6Ep8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;p&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#038;title=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/" data-a2a-title="DevNation Live: Subatomic reactive systems with Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/"&gt;DevNation Live: Subatomic reactive systems with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ripgBkVrW58" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, Clement Escoffier, Principal Software Engineer at Red Hat, will dive into the reactive side of Quarkus. Quarkus provides a supersonic development experience [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/"&gt;DevNation Live: Subatomic reactive systems with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612637</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-26T06:59:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/</feedburner:origLink></entry><entry><title>Controlling Red Hat OpenShift from an OpenShift pod</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_YKuAPeu07I/" /><category term="Kubernetes" /><category term="OpenShift" /><category term="Python" /><category term="Red Hat OpenShift Container Platform" /><category term="python" /><category term="Red Hat OpenShift" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=612997</id><updated>2019-07-25T07:00:15Z</updated><published>2019-07-25T07:00:15Z</published><content type="html">&lt;p&gt;This article explains how to configure a Python application running within an &lt;a href="http://developers.redhat.com/openshift/"&gt;OpenShift&lt;/a&gt; pod to communicate with the Red Hat OpenShift cluster via &lt;code&gt;openshift-restclient-python&lt;/code&gt;, the OpenShift Python client.&lt;span id="more-612997"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-613637 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png" alt="" width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-768x409.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster.png 1246w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;tl;dr&lt;/h2&gt; &lt;p&gt;The code sample below is a sample application running within a pod, which connects to an OpenShift cluster and prints a list of projects:&lt;/p&gt; &lt;pre&gt;import os import sys import yaml from kubernetes import client, config from openshift.dynamic import DynamicClient config.load_incluster_config() k8s_config = client.Configuration() k8s_client = client.api_client.ApiClient(configuration=k8s_config) dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project") print(v1_projects.get()) &lt;/pre&gt; &lt;h2&gt;Running locally&lt;/h2&gt; &lt;p&gt;Using &lt;code&gt;openshift-restclient-python&lt;/code&gt; from your laptop is relatively easy. This OpenShift dynamic client extends the standard &lt;a href="http://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; Python client. The first step is to install &lt;code&gt;openshift-restclient-python&lt;/code&gt;, which will pull in the &lt;code&gt;kubernetes&lt;/code&gt; dependency:&lt;/p&gt; &lt;pre&gt;$ pip install openshift &lt;/pre&gt; &lt;p&gt;Next, we load a Kube configuration. The Kubernetes function &lt;code&gt;new_client_from_config()&lt;/code&gt; searches for the file &lt;code&gt;~/.kube/config&lt;/code&gt;. The &lt;code&gt;new_client_from_config()&lt;/code&gt; function is similar to the &lt;code&gt;load_kube_config()&lt;/code&gt; function, but also returns an &lt;code&gt;ApiClient&lt;/code&gt; to be used with any API object. This task allows the caller to concurrently talk with multiple clusters.&lt;/p&gt; &lt;p&gt;The code example below uses the OpenShift dynamic client to list every project the user can access:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 from kubernetes import client, config from openshift.dynamic import DynamicClient k8s_client = config.new_client_from_config() dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version='project.openshift.io/v1', kind='Project') project_list = v1_projects.get() for project in project_list.items: print(project.metadata.name) &lt;/pre&gt; &lt;p&gt;Running locally after logging into OpenShift works as expected:&lt;/p&gt; &lt;pre&gt;oc login -u user https://ocp.lab.example.com ./cmdlineclient.py ProjectA ProjectB &lt;/pre&gt; &lt;h2&gt;Running within Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;However, running the same code with an OpenShift pod will result in a &lt;code&gt;TypeError&lt;/code&gt;, as shown below:&lt;/p&gt; &lt;pre&gt;oc rsh api-gateway-dfs3 cd /opt/app-root/src/ ./cmdlineclient.py Traceback (most recent call last): File "./cmdlineclient.py", line 6, in &amp;#60;module&amp;#62; k8s_client = config.new_client_from_config() File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 667, in new_client_from_config persist_config=persist_config) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 645, in load_kube_config persist_config=persist_config) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 613, in _get_kube_config_loader_for_yaml_file **kwargs) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 153, in __init__ self.set_active_context(active_context) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 173, in set_active_context context_name = self._config['current-context'] File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 495, in __getitem__ v = self.safe_get(key) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 491, in safe_get key in self.value): TypeError: argument of type 'NoneType' is not iterable&lt;/pre&gt; &lt;p&gt;Unfortunately, the current documentation provided by &lt;code&gt;openshift-restclient-python&lt;/code&gt; is lacking. It does not explain how to connect to OpenShift or Kubernetes from within a pod.&lt;/p&gt; &lt;p&gt;After much searching, I found a section within the Kubernetes documentation which states that when accessing the Kube API from a pod, locating and authenticating the API server are somewhat different. They recommend using one of the official client libraries, which I was already doing. These libraries should automatically discover the API server and authenticate.&lt;/p&gt; &lt;p&gt;The Kubernetes config library also has the function &lt;code&gt;load_incluster_config()&lt;/code&gt;. This function uses a combination of environment variables and a token to authenticate the API server. The recommended way to do this is to associate a pod with a service account. When the pod is started, a token for the service account is placed into the filesystem tree of each container in that pod, at &lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;That all sounds simple enough. But, before updating the &lt;code&gt;cmdlineclient&lt;/code&gt;, we need to create a service account, assign it a role, and then associate it with a pod (via a deployment config). The following instructions outline how to use the &lt;code&gt;oc&lt;/code&gt; client to achieve this:&lt;/p&gt; &lt;pre&gt;oc create serviceaccount robot oc policy add-role-to-user admin -z robot oc patch dc/api-gw --patch '{"spec":{"template":{"spec":{"serviceAccountName": "robot"}}}}' oc rsh api-gw-9-kzrhn (app-root) sh-4.2$ ls -al /var/run/secrets/kubernetes.io/serviceaccount/token lrwxrwxrwx. 1 root root 12 Jul 14 06:13 /var/run/secrets/kubernetes.io/serviceaccount/token -&amp;#62; ..data/token&lt;/pre&gt; &lt;p&gt;Now that we confirmed that a token is being injected within the pod, we need to update our function to use &lt;code&gt;load_incluster_config()&lt;/code&gt;. However, remember that &lt;code&gt;new_client_from_config()&lt;/code&gt; returns an &lt;code&gt;ApiClient&lt;/code&gt;. We need to ensure we do this update before passing the &lt;code&gt;ApiClient&lt;/code&gt; to the OpenShift dynamic client. Another undocumented step relates to the OpenShift dynamic client requiring a &lt;code&gt;client.configuration&lt;/code&gt; object within the Kubernetes &lt;code&gt;ApiClient&lt;/code&gt; object.&lt;/p&gt; &lt;p&gt;Lastly, we should also ensure that our code will work both within OpenShift and on our laptop. The updated &lt;code&gt;cmdlineclientv2.py&lt;/code&gt; (below) determines if the client is running within OpenShift before calling the &lt;code&gt;load_incluster_config()&lt;/code&gt;. It will also fall back to reading &lt;code&gt;~/.kube/config&lt;/code&gt;, which enables the program to run locally:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 import os import sys import yaml from kubernetes import client, config from openshift.dynamic import DynamicClient # Check if code is running in OpenShift if "OPENSHIFT_BUILD_NAME" in os.environ: config.load_incluster_config() file_namespace = open( "/run/secrets/kubernetes.io/serviceaccount/namespace", "r" ) if file_namespace.mode == "r": namespace = file_namespace.read() print("namespace: %s\n" %(namespace)) else: config.load_kube_config() # Create a client config k8s_config = client.Configuration() k8s_client = client.api_client.ApiClient(configuration=k8s_config) dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project") project_list = v1_projects.get() for project in project_list.items: print("Project Name: %s" % (project.metadata.name)) &lt;/pre&gt; &lt;p&gt;When running &lt;code&gt;cmdlineclientv2&lt;/code&gt;, notice that although we have assigned the &lt;code&gt;admin&lt;/code&gt; role to the service account, it is only &lt;code&gt;admin&lt;/code&gt; within the &lt;code&gt;ProjectA&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;./cmdlineclientv2.py namespace: ProjectA Project Name: ProjectA &lt;/pre&gt; &lt;p&gt;I hope you found this post helpful. Comments and questions are welcome.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#038;title=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" data-a2a-url="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/" data-a2a-title="Controlling Red Hat OpenShift from an OpenShift pod"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/"&gt;Controlling Red Hat OpenShift from an OpenShift pod&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_YKuAPeu07I" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article explains how to configure a Python application running within an OpenShift pod to communicate with the Red Hat OpenShift cluster via openshift-restclient-python, the OpenShift Python client. tl;dr The code sample below is a sample application running within a pod, which connects to an OpenShift cluster and prints a list of projects: import os [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/"&gt;Controlling Red Hat OpenShift from an OpenShift pod&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612997</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2019-07-25T07:00:15Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux 8.1 Beta brings new development tools</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Uxt5qlDnqRw/" /><category term="Announcement" /><category term="RHEL8" /><category term="cloud" /><category term="GCC 9" /><category term="Node.js" /><author><name>Mike Guerette</name></author><id>https://developers.redhat.com/blog/?p=612197</id><updated>2019-07-24T13:30:36Z</updated><published>2019-07-24T13:30:36Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;In May, we announced the general availability of &lt;/span&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-now-generally-available/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux (RHEL) 8&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, the intelligent operating system which we believe is the best RHEL ever for developers. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The work on Red Hat Enterprise Linux 8 continues, and we are pleased to &lt;a href="http://redhat.com/en/blog/red-hat-enterprise-linux-81-beta-now-available"&gt;announce&lt;/a&gt; the beta availability of RHEL 8.1., which enables greater developer productivity, improves manageability, and adds new security enhancements. This release also includes updated drivers that deliver new features and bug fixes for supported hardware platforms.&lt;/span&gt;&lt;span id="more-612197"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;New application streams&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;RHEL 8.1 Beta delivers several new &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;application streams&lt;/a&gt; with new and/or updated developers tools, application frameworks, and languages. These include:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;GCC Toolset 9&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Node.js 12&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Ruby 2.6&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;PHP 7.3&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Nginx 1.16&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Update of Go 1.12&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Update of Clang/LLVM 8&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;All of these packages can be obtained using &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;yum&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;, and are included in all Red Hat Enterprise Linux subscriptions. &lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Image Builder&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux 8 introduced Image Builder, a component that lets you create custom system images in a variety of formats. With RHEL 8.1 Beta, Image Builder is extended to support more configuration options for adding users and SSH keys. New image formats have also been added to support cloud platforms such as Google Cloud Platform and Alibaba Cloud. With these additions, RHEL 8.1 Beta now supports every major cloud infrastructure platform including AWS, Microsoft Azure, OpenStack, and VMware.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;More good stuff in RHEL 8.1 Beta&lt;/h2&gt; &lt;h3&gt;&lt;b&gt;Improved manageability&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The Red Hat Enterprise Linux web console now supports finer granularity when configuring firewall rules and system services, including:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Better configuration for firewall zones.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Log filtering based on services.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Service filtering based on metadata like service name and state. &lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Additionally, for virtual machines (VMs) running on RHEL 8.1 Beta, you can now use the web console for importing existing QCOW images, managing different types of storage pools and modifying autostart configuration and memory allocation, as well as pausing and resuming existing VMs.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Enhanced security&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Security continues to be an important focus for Red Hat Enterprise Linux, and RHEL 8.1 Beta adds container-centric SELinux profiles. With this new capability, you can create a more tailored security policy for better control of how a container accesses host system resources such as storage, compute and network. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This approach enables customers to more effectively harden their container deployments against security violations, making it easier to achieve and maintain regulatory compliance. Administrators can also be far more selective about which applications are permitted to be launched on a system using a new application whitelisting functionality. This feature reduces the potential risk of running unknown or untrustworthy applications. Additionally, RHEL 8.1 Beta will be used as we pursue additional FIPS-140 and Common Criteria certification for the platform. &lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Resources&lt;/b&gt;&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/rhel8/"&gt;Learn more about RHEL 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/download-manager/file/rhel-8.1-beta-1-x86_64-dvd.iso"&gt;rhel-8.1-beta-1-x86_64-dvd.iso&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/download-manager/file/rhel-8.1-beta-1-x86_64-boot.iso"&gt;rhel-8.1-beta-1-x86_64-boot.iso&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/download-manager/file/rhel-8.1-beta-1-aarch64-dvd.iso"&gt;rhel-8.1-beta-1-aarch64-dvd.iso&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/download-manager/file/rhel-8.1-beta-1-aarch64-boot.iso"&gt;rhel-8.1-beta-1-aarch64-boot.iso&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/" data-a2a-title="Red Hat Enterprise Linux 8.1 Beta brings new development tools"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/"&gt;Red Hat Enterprise Linux 8.1 Beta brings new development tools&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Uxt5qlDnqRw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In May, we announced the general availability of Red Hat Enterprise Linux (RHEL) 8, the intelligent operating system which we believe is the best RHEL ever for developers.  The work on Red Hat Enterprise Linux 8 continues, and we are pleased to announce the beta availability of RHEL 8.1., which enables greater developer productivity, improves [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/"&gt;Red Hat Enterprise Linux 8.1 Beta brings new development tools&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612197</post-id><dc:creator>Mike Guerette</dc:creator><dc:date>2019-07-24T13:30:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/</feedburner:origLink></entry><entry><title>What’s new in the Visual Studio Code XML Extension</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AEdExHcuPXQ/" /><category term="Developer Tools" /><category term="Eclipse Che" /><category term="Java" /><category term="VS Code" /><category term="Visual Studio Code" /><category term="xml" /><author><name>Nikolas Komonen</name></author><id>https://developers.redhat.com/blog/?p=615477</id><updated>2019-07-24T13:00:52Z</updated><published>2019-07-24T13:00:52Z</published><content type="html">&lt;p&gt;A new and improved version of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml"&gt;Visual Studio Code XML Extension by Red Hat&lt;/a&gt; has been released under version 0.8.0. This new release brings new features to provide even more support for XSD-related features (the blueprint file of an XML document) along with various performance improvements.&lt;br /&gt; &lt;span id="more-615477"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;New Features&lt;/h2&gt; &lt;h4&gt;Jump to opposite tag:&lt;/h4&gt; &lt;p&gt;Sometimes in large documents, the opposite start/end tag can be located off the screen somewhere else, making it difficult to find. Now tags are treated as hyperlinks and, through Ctrl+click, you can now jump around from either the start or end tag to the opposite end.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/61671597-a90b7000-ace8-11e9-941d-db6ff37c69ac.gif" width="778" height="296" /&gt;&lt;/p&gt; &lt;h4&gt;CDATA and comment completion:&lt;/h4&gt; &lt;p&gt;You can now easily complete the confusing CDATA block, along with comments.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/32624665/61798881-15c16000-adf8-11e9-9004-01acf91ca596.gif" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3 style="text-align: left;"&gt;XSD-related updates&lt;/h3&gt; &lt;h4&gt;Accurate XSD-based completion:&lt;/h4&gt; &lt;p&gt;Prior to this release when creating an element in either an XML or XSD document the auto-completion suggestions based on XSDs were not always correct. Depending on many constraints such as minOccurs/maxOccurs, if the elements were in a sequence … the provided completion item could be invalid. In version 0.8.0, we now provide only valid elements.&lt;/p&gt; &lt;p&gt;See below where a sequence with 2 elements is declared but only the first one is provided for completion:&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/YRE4KpRf3MVKXxNveU/giphy.gif" width="480" height="282" /&gt;&lt;/p&gt; &lt;h4&gt;XML file validation on external XSD changes:&lt;/h4&gt; &lt;p&gt;Originally for XML validation relative to the XSD, validation would only be triggered on an XSD change if it was open/changed internally within the VS Code application. As of this release, the server will track that XSD file externally, detect all changes, and perform the appropriate actions.&lt;/p&gt; &lt;p&gt;The image below shows a validation error on an XML file in VS Code after the XSD it is linked to was changed externally in vim.&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-615497 aligncenter" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-300x99.png" alt="" width="634" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-300x99.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-768x253.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-1024x337.png 1024w" sizes="(max-width: 634px) 100vw, 634px" /&gt;&lt;/p&gt; &lt;h4&gt;Highlight a specific type in an XSD file:&lt;/h4&gt; &lt;p&gt;In XSD files, you can reference a type, a type defines a specific XML structure that the XML document must follow. This type can be reused and applied to multiple areas in the document, which can lead to type occurrences being used all over the place. With the ability to highlight all references, users can scroll through the document and see all of these references without having to manually search for each use.&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/1932211/60190099-5d24f280-9832-11e9-9ac3-2e7a61f01eb8.gif" width="1018" height="385" /&gt;&lt;/p&gt; &lt;h4&gt;Auto-complete types in an XSD file:&lt;/h4&gt; &lt;p&gt;After defining a type, you can start applying it to elements in the XSD file. Normally, you would have to know which types have already been defined and then type it making sure to write it correctly. This auto-complete feature now gathers all existing types and provides them through completion.&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/TfiOSZoUKDi13UnMlx/giphy.gif" width="480" height="282" /&gt;&lt;/p&gt; &lt;h4&gt;Jump to the definition of a type:&lt;/h4&gt; &lt;p&gt;If you are in an XSD working with an element that uses a type, you might want to go to the actual definition of it to be able to see its structure. You can now Ctrl+click and go directly to the definition without having to manually search for the definition through all the other implementations.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter" src="https://user-images.githubusercontent.com/1932211/59786268-29444d00-92c7-11e9-9be0-4fbe3f4ff770.gif" width="470" height="395" /&gt;&lt;/p&gt; &lt;h4&gt;Search the references of a type:&lt;/h4&gt; &lt;p&gt;By selecting &lt;em&gt;Find All References&lt;/em&gt;, you can now find all uses of the schema type. Doing so in VS Code will open up a mid-sized window that groups together all references to that type, making it easy to find and read through every use of the type.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/60096325-ef54ca00-9750-11e9-8be0-46f1d16e5f11.gif" width="666" height="252" /&gt;&lt;/p&gt; &lt;h4&gt;See the number of references of a type as a CodeLens:&lt;/h4&gt; &lt;p&gt;Similar to the &lt;em&gt;Find All References&lt;/em&gt;, we also provide a CodeLens that is also clickable. This will bring up the same pop-up window from &lt;em&gt;Find All References&lt;/em&gt; as well as show how many there are.&lt;/p&gt; &lt;h4&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/32624665/61799091-73ee4300-adf8-11e9-9ec2-f26bc0e8939f.gif" width="800" height="347" /&gt;&lt;/h4&gt; &lt;h4&gt;Jump to the definition of a type from the XML document:&lt;/h4&gt; &lt;p&gt;Similar to the previous ability to go to the type definition from an XSD file, you can also right-click and select &lt;em&gt;Go to Type Definition&lt;/em&gt; to find the type that the XML implementation references. Before you would have to figure out which element is being referenced in the XSD and then find the type definition of that element definition.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/61134698-74194500-a4c0-11e9-90bb-6e3bb5825738.gif" width="685" height="223" /&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Documentation improvements&lt;/h2&gt; &lt;h4&gt;Documentation from hover and completion is provided as Markdown:&lt;/h4&gt; &lt;p&gt;In an XSD element, documentation can be written to provide some information on that element. XML allows for the use of Markdown or HTML, and when rendering HTML it did not display well with the LSP:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter" src="https://user-images.githubusercontent.com/148698/49343276-3acc4d00-f634-11e8-9d11-5bbd2d3317a9.png" width="651" height="143" /&gt;&lt;/p&gt; &lt;p&gt;With this release, the following documentation will now be properly displayed in Markdown, resulting in:&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/148698/50027419-2b48ee80-ffba-11e8-98b6-40a2ea24a89a.png" width="658" height="127" /&gt;&lt;/p&gt; &lt;p&gt;Additionally, at the bottom of the description hyperlinks to the connected XSD file are provided:&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/1932211/61650563-45ffe600-acb4-11e9-8c76-565ff0180ed1.png" width="930" height="254" /&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Performance improvements&lt;/h2&gt; &lt;p&gt;This release had a focus on performance improvements, and we did just that by both decreasing memory usage and improving server speed.&lt;/p&gt; &lt;h4&gt;Speed improvements:&lt;/h4&gt; &lt;p&gt;To get a bit more technical, one improvement to speed was replacing the use of some regular expressions (regex) with hand-crafted java code. In this case, the regex checked for attribute names, but as you can imagine multiple attribute name regex calls during parsing could become a bit taxing. After this change, we noticed a 2-3x speed improvement on large files!&lt;/p&gt; &lt;h4&gt;Document symbols preferences:&lt;/h4&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/XeMcJRq26ETKsW2od9/giphy.gif" width="480" height="314" /&gt;&lt;/p&gt; &lt;p&gt;The Language Server Protocol provides a feature known as Document Symbols/Outline. On the left side of the above gif, is the Outline, which has a symbol for each significant piece in the XML document. In a large document, you will have a huge list of these symbols that will most likely be unhelpful because of the sheer amount of them. Whenever something changes in the document, these symbols have to be recalculated, which, as you can imagine for a large document, would be very penalizing.&lt;/p&gt; &lt;p&gt;To account for this, we’ve provided the ability to either selectively disable the Outline for files matched by a pattern or to just disable it completely. Doing so took a huge load off of the CPU and allowed for improved performance with large files.&lt;/p&gt; &lt;h4&gt;Memory improvements:&lt;/h4&gt; &lt;p&gt;Under the hood of the language server, we found some inefficiencies that were causing large hits to the memory; here was one of them.&lt;/p&gt; &lt;p&gt;Normally when a user types, a new copy of the entire document is sent to the server to be processed. As the file grows in size it is easy to see the problem with this method as a user ends up typing multiple characters continuously. Incremental Syncing is a method provided by the &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; that allows only the changed characters to be sent to the server to provide the same result with much less data being transferred. So, that’s what we did. In doing so, a large amount of memory was saved since the buffer to hold this data would only have to be enough to hold a few characters at most instead of the entire document.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#038;title=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/" data-a2a-title="What’s new in the Visual Studio Code XML Extension"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/"&gt;What&amp;#8217;s new in the Visual Studio Code XML Extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AEdExHcuPXQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A new and improved version of the Visual Studio Code XML Extension by Red Hat has been released under version 0.8.0. This new release brings new features to provide even more support for XSD-related features (the blueprint file of an XML document) along with various performance improvements. New Features Jump to opposite tag: Sometimes in [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/"&gt;What&amp;#8217;s new in the Visual Studio Code XML Extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">615477</post-id><dc:creator>Nikolas Komonen</dc:creator><dc:date>2019-07-24T13:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/</feedburner:origLink></entry><entry><title>Probing golang runtime using SystemTap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zxMJ57qGpnQ/" /><category term="Go" /><category term="Performance" /><category term="Golang" /><category term="performance" /><category term="systemtap" /><author><name>Jafeer Uddin</name></author><id>https://developers.redhat.com/blog/?p=612097</id><updated>2019-07-24T07:00:18Z</updated><published>2019-07-24T07:00:18Z</published><content type="html">&lt;p&gt;I recently saw an &lt;a href="https://eng.uber.com/optimizing-m3/"&gt;article from Uber Engineering&lt;/a&gt; describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency &lt;span class="author-g-ew4yuqf5p458cil1"&gt;due to memory allocation and copying&lt;/span&gt;. The engineers ended up modifying the golang runtime with additional instrumentation to report these stack growths to confirm their suspicions. This situation is a perfect example of where SystemTap could have been used.&lt;/p&gt; &lt;p&gt;&lt;a href="https://sourceware.org/systemtap/"&gt;SystemTap&lt;/a&gt; is a tool that can be used to perform live analysis of a running program. It is able to interrupt normal control flow and execute code specified by a SystemTap script, which can allow users to temporarily modify a running program without having to change the source and recompile.&lt;span id="more-612097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Here is a SystemTap script that can be used to replicate the patch done in the Uber article:&lt;/p&gt; &lt;pre&gt;global printstackgrow probe process(&lt;em&gt;PATH&lt;/em&gt;).statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { shouldPrintStack = printstackgrow % 1000 == 0 printstackgrow++ if (shouldPrintStack) { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } } &lt;/pre&gt; &lt;p&gt;This script introduces a probe within the &lt;code&gt;runtime.newstack()&lt;/code&gt; function at line 936 of stack.go (this location will depend on your golang installation) for the executable specified by &lt;em&gt;PATH&lt;/em&gt;. When we reach that point in execution, SystemTap will redirect and execute the code placed within the probe handler shown above. The handler performs the same steps done in the Uber article patch, printing out the change in stack size and a backtrace for every 1000 hits of &lt;code&gt;runtime.newstack()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s see this script in action. I am going to use the following golang example to demonstrate. This program prints out some text and spawns go routines to do the same, just to get to a point where a stack needs to be grown and &lt;code&gt;runtime.newstack()&lt;/code&gt; is called.&lt;/p&gt; &lt;pre&gt;$ cat example.go package main import ( "fmt" "time" ) func say(s string) { for i := 0; i &amp;#60; 5; i++ { time.Sleep(1 * time.Millisecond) fmt.Println(s) } } func main() { go say("world") say("hello") } &lt;/pre&gt; &lt;p&gt;For this demonstration, I will simplify the SystemTap script a little. The sampling code to limit output isn&amp;#8217;t needed, as there won&amp;#8217;t be too much output with the example. Also now we have an actual executable, generated using &lt;code&gt;go build example.go&lt;/code&gt;, which can be used to replace &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;$ cat newstack.stp probe process("./example").statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } &lt;/pre&gt; &lt;p&gt;When we run this script, we get:&lt;/p&gt; &lt;pre&gt;$ ls newstack.stp example example.go $ stap newstack.stp &amp;#60;== execute "./example" in another terminal : runtime: newstack: 2048 -&amp;#62; 4096 0x40d748 : runtime.mallocgc+0x548/0x9d0 at /usr/lib/golang/src/runtime/malloc.go:740 [/home/juddin/example] 0x40dd48 : runtime.newobject+0x38/0x60 at /usr/lib/golang/src/runtime/malloc.go:839 [/home/juddin/example] : 0x47c4cb : fmt.Fprintln+0x8b/0x100 at /usr/lib/golang/src/fmt/print.go:255 [/home/juddin/example] 0x47c597 : fmt.Println+0x57/0x90 at /usr/lib/golang/src/fmt/print.go:264 [/home/juddin/example] 0x4827a4 : main.say+0xa4/0xd0 at /home/juddin/example.go:9 [/home/juddin/example] 0x44ecb1 : runtime.goexit+0x1/0x10 at /usr/lib/golang/src/runtime/asm_amd64.s:2362 [/home/juddin/example] &lt;/pre&gt; &lt;p&gt;I have omitted some of the output to make things a little clearer and focused on the points of interest. As can be seen from the backtrace, a stack growth is triggered from &lt;code&gt;main.say()&lt;/code&gt;. So, we are able to determine that our code indeed does cause a stack growth, and we did this without having to modify the target program, never mind the go runtime or compiler.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#038;title=Probing%20golang%20runtime%20using%20SystemTap" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/" data-a2a-title="Probing golang runtime using SystemTap"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/"&gt;Probing golang runtime using SystemTap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zxMJ57qGpnQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently saw an article from Uber Engineering describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency due to memory allocation and copying. The engineers ended [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/"&gt;Probing golang runtime using SystemTap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612097</post-id><dc:creator>Jafeer Uddin</dc:creator><dc:date>2019-07-24T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/</feedburner:origLink></entry></feed>
